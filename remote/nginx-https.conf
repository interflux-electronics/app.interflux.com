server
{
  listen 80;
  listen [::]:80;

  server_name new.interflux.com;
  server_name app.interflux.com;

  return 301 https://new.interflux.com$request_uri;
}

server
{
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name app.interflux.com;

  ssl_certificate /etc/letsencrypt/live/app.interflux.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/app.interflux.com/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  return 301 https://new.interflux.com$request_uri;
}

server
{
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name new.interflux.com;

  root /var/www/app.interflux.com/dist;
  index index.html;

  ssl_certificate /etc/letsencrypt/live/new.interflux.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/new.interflux.com/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  # For Ember apps with Fastboot
  location /assets/
  {
    expires 30d;
    proxy_pass http://localhost:8000;
  }
  location /
  {
    expires -1;
    proxy_pass http://localhost:8000;
  }

  # For Ember apps without Fastboot
  # location / {
  #   try_files $uri /index.html;
  # }

  # For resolving Ember apps
  # 1. First send request to Ember Fastboot
  # 2. If Fastboot fails, hit dist folder directly (for assets)
  # 3. If no asset was found, serve Ember's index.html at the root of the dist folder (for all other routes)
  # location @fastboot {
  #    proxy_pass http://localhost:8000;
  # }
  # location / {
  #   try_files @fastboot $uri /index.html;
  # }


  # Push these files as soon as index.html is requested
  location /index.html
  {
    http2_push /assets/interflux.css;
    http2_push /assets/interflux.js;
    http2_push /assets/vendor.css;
    http2_push /assets/vendor.js;
  }
}
